#!/usr/bin/env python

from random import randint
import random
import names
import time
import sqlite3



def get_random_digits(n):
    numbers = "1,2,3,4,5,6,7,8,9"
    return ''.join([random.choice(numbers.split(',')) for j in range(n)])


class StudentRecord:
    def add(self, stud, new=False, record=""):
        if new:
            record = record.split(',')
        stud_id = record[0] if new else get_random_digits(8)
        name = record[1] if new else "Manik"+ str(stud_id)
        cc = record[2] if new else name[2:9]
        return stud.append([stud_id, name, cc])

    def QuickSort(self, student_list):
        if len(student_list) < 2:
            return student_list
        pivot = student_list[0]
        lower = self.QuickSort([x for x in student_list[1:] if x < pivot])
        upper = self.QuickSort([x for x in student_list[1:] if x >= pivot])
        return lower + [pivot] + upper

    def InsertionSort(self,new_student_list):
        for index in range(1, len(new_student_list)):
            I = index
            temp = new_student_list[I]
            while I > 0 and temp < new_student_list[I - 1]:
                new_student_list[I] = new_student_list[I - 1]
                I = I - 1
            new_student_list[I] = temp
        return new_student_list




class StudentCalculate:

    def main(self):
        stud1 = []
        SR = StudentRecord()

        for i in range(10000):
            #if stud1[i]==stud1:
            #    i=i+1
            #    continue
           # else:
            SR.add(stud1)

        start = time.perf_counter()
        stud1=SR.QuickSort(stud1)
        print(stud1)
        print("Lowest Student ID record is: \n")
        print(stud1[0])
        #print(stud1[1:])
        end = time.perf_counter()
        print("Quicksort timing is: ",(end - start))

        UserIsInputing=True

        while(UserIsInputing):
            option = input("Do you wish to enter more records ?..Please select Yes or No\n")
            print("Length of the list is :",len(stud1))
            if option.lower() == "yes":
                UserIsInputing = True
                SR.add(stud1, True, input('Enter student_id,name,Course code\n'))

                start = time.perf_counter()
                stud1=SR.InsertionSort(stud1)
                #print("New list is: \n")
                #print(stud1)
                print("Lowest element in new list is: \n")
                print(stud1[0])
                end = time.perf_counter()
                print("Insertion Sort timing is: ", (end - start))

            elif option.lower() == "no":
                UserIsInputing = False

                exit()
            else:
                print("Please enter a valid input of either yes or no")
                continue


SC = StudentCalculate()
SC.main()

# if __name__ == '__main__':
#    main()
